{
  "openapi": "3.0.0",
  "info": {
    "title": "User Service API",
    "version": "1.0.0",
    "description": "API for managing users in Smart Learning Platform"
  },
  "paths": {
    "/users/login-jwt": {
      "post": {
        "summary": "Login using JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "teacher1@example.com" },
                  "password": { "type": "string", "example": "password123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "JWT token returned" },
          "401": { "description": "Invalid credentials" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/login-session": {
      "post": {
        "summary": "Login using session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "teacher1@example.com" },
                  "password": { "type": "string", "example": "password123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Session created successfully" },
          "401": { "description": "Invalid credentials" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/signin": {
      "post": {
        "summary": "Sign up a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_name": { "type": "string", "example": "Teacher One" },
                  "user_email": { "type": "string", "example": "teacher1@example.com" },
                  "user_password": { "type": "string", "example": "password123" },
                  "user_role": { "type": "string", "example": "teacher" }
                },
                "required": ["user_name", "user_email", "user_password", "user_role"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User created successfully" },
          "400": { "description": "User already exists" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/users/profile": {
      "get": {
        "summary": "Get user profile (session-protected)",
        "responses": {
          "200": { "description": "User profile returned" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/all-users": {
      "get": {
        "summary": "Get all users (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": { "description": "List of all users" },
          "403": { "description": "Forbidden: Access denied" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/analytics": {
      "get": {
        "summary": "Analytics data (Admin + API key)",
        "parameters": [
          {
            "name": "apiKey",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "example": "validKey" },
            "description": "API key to access analytics"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": { "description": "Analytics data returned" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Invalid API Key or Forbidden" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
